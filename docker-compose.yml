include:
  # - apps/Market_Reader/pipelines/fundamentals/vectorize/compose_vectorizer.yml
  - spark/spark-compose.yml
  - kibana/kibana-compose.yml

services:
  postgres:
    image: postgres:latest
    env_file:
      - .env
    shm_size: 2gb 
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${DEF_DB_NAME}
      - PGDATA=/data/postgres
    # /mnt/bulkStorage is the 4TB hard disk mount
    volumes:
      - ${PG_STORAGE}:/data/postgres
      - ${SQL_FILE_DIR}:/home
    restart: unless-stopped
    networks:
      - homeserver
    profiles:
      - er
      - llm
    ports:
      - "5432:5432"
    container_name: postgres_container

  pgadmin:
    image: dpage/pgadmin4:8.0
    environment:
        - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
        - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    restart: unless-stopped
    user: root
    volumes:
      - ${PGADMIN_STORAGE}:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
     - homeserver
    profiles:
      - llm
    depends_on:
     - postgres
    container_name: pgadmin_service

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ${ELASTIC_CERT_LOC}:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - homeserver
    profiles:
      - llm
      - elastic
    container_name: elastic-setup

  es01:
    depends_on:
      elastic:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ${ELASTIC_CERT_LOC}:/usr/share/elasticsearch/config/certs
      - ${ELASTIC_NODE1_STORAGE}:/usr/share/elasticsearch/data
      - ${ELASTIC_STORAGE}:/var/data/elasticsearch
      - ${ELASTIC_LOG_STORAGE}:/var/log/elasticsearch
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es02
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ELASTIC_LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      # - ES_JAVA_OPTS="-Xms32M -Xmx128M"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - homeserver
    profiles:
      - llm
      - elastic
    container_name: elastic-n01

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ${ELASTIC_CERT_LOC}:/usr/share/elasticsearch/config/certs
      - ${ELASTIC_NODE2_STORAGE}:/usr/share/elasticsearch/data
      - ${ELASTIC_STORAGE}:/var/data/elasticsearch
      - ${ELASTIC_LOG_STORAGE}:/var/log/elasticsearch
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ELASTIC_LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      # - ES_JAVA_OPTS="-Xms32M -Xmx128M"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - homeserver
    profiles:
      - llm
      - elastic
    container_name: elastic-n02

  ollama:
    image: ollama/ollama
    restart: unless-stopped
    user: root
    volumes:
        - ./ollama:/root/.ollama
    ports:
        - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    profiles:
      - llm
    container_name: ollama
    
  proxy:
    build:
      context: ./proxy/
      dockerfile: Dockerfile
      args:
          - SRC_IMG=nginx
          - SRC_TAG=latest
          - no_cache
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs/crunchy-dyndns.crt:/etc/ssl/certs/crunchy-dyndns.crt
      - ./certs/crunchy-dyndns.key:/etc/ssl/private/crunchy-dyndns.key
      - ${ELASTIC_CERT_LOC}/ca.crt:/etc/ssl/certs/elastic-ca.crt
      - ${ELASTIC_CERT_LOC}/ca.key:/etc/ssl/certs/elastic-ca.key
    ports:
      - "443:443"
      - "80:80"
    restart: unless-stopped
    stop_grace_period: 30s
    extra_hosts:
      - "host.docker.internal:host-gateway"
    security_opt:
      - seccomp:unconfined
    networks:
     - homeserver
    profiles:
      - llm
    depends_on:
      - kibana
      - pgadmin
    container_name: proxy_service

networks:
  homeserver:
    name: homeserver
    labels:
      com.example.description: "home docker network"